-- Assuming that each instructor can teach multiple classes and each class can be taught by multiple instructors. 
-- For example: instructor A can teach Python on Monday and Tuesday, and instructor B can teach Python on Wednesday and Thursday.
-- But the information about days and other instructor-class related stuff will be stored in a bridge table, 
-- (let's say TEACHING, between CLASS and INSTRUCTOR), which is not included for this question as that information is not required over here.




-- WE WILL GET STUDENT COUNT USING THIS BRIDGE TABLE BETWEEN STUDENT AND INSTRUCTOR
CREATE TABLE INS_STUDENT ( 
    SID INTEGER NOT NULL, 
    IID CHAR(30) NOT NULL,
    PRIMARY KEY (SID, IID));

INSERT INTO INS_STUDENT VALUES (123, 1);
INSERT INTO INS_STUDENT VALUES (123, 2);
INSERT INTO INS_STUDENT VALUES (123, 3);
INSERT INTO INS_STUDENT VALUES (662, 1);
INSERT INTO INS_STUDENT VALUES (662, 2);
INSERT INTO INS_STUDENT VALUES (662, 3);
INSERT INTO INS_STUDENT VALUES (662, 4);
INSERT INTO INS_STUDENT VALUES (345, 2);
INSERT INTO INS_STUDENT VALUES (345, 3);
INSERT INTO INS_STUDENT VALUES (345, 4);
INSERT INTO INS_STUDENT VALUES (555, 3);
INSERT INTO INS_STUDENT VALUES (555, 2);
INSERT INTO INS_STUDENT VALUES (555, 5);
INSERT INTO INS_STUDENT VALUES (213, 1);
INSERT INTO INS_STUDENT VALUES (213, 4);
INSERT INTO INS_STUDENT VALUES (213, 5);
INSERT INTO INS_STUDENT VALUES (211, 2);
INSERT INTO INS_STUDENT VALUES (340, 5);
INSERT INTO INS_STUDENT VALUES (109, 5);
INSERT INTO INS_STUDENT VALUES (111, 5);



-- WE WILL GET TEACHING HOURS USING THIS BRIDGE TABLE BETWEEN CLASS AND INSTRUCTOR
-- THE HOURS ARE FOR EACH CLASS FOR THE WHOLE 6 WEEK PERIOD
CREATE TABLE TEACHING ( 
    IID INTEGER NOT NULL, 
    CID INTEGER NOT NULL, 
    HOURS_TAUGHT INTEGER NOT NULL,
    PRIMARY KEY (IID, CID));

INSERT INTO TEACHING VALUES (1,1,60);
INSERT INTO TEACHING VALUES (1,4,40);
INSERT INTO TEACHING VALUES (1,5,20);
INSERT INTO TEACHING VALUES (2,1,20);
INSERT INTO TEACHING VALUES (2,2,35);
INSERT INTO TEACHING VALUES (2,3,20);
INSERT INTO TEACHING VALUES (3,2,30);
INSERT INTO TEACHING VALUES (3,3,50);
INSERT INTO TEACHING VALUES (4,2,20);
INSERT INTO TEACHING VALUES (4,3,30);
INSERT INTO TEACHING VALUES (4,5,20);
INSERT INTO TEACHING VALUES (5,2,25);
INSERT INTO TEACHING VALUES (5,3,10);
INSERT INTO TEACHING VALUES (5,4,45);
INSERT INTO TEACHING VALUES (5,5,50);

CREATE TABLE INSTRUCTOR ( 
    IID INTEGER NOT NULL, 
    IFName CHAR(10) NOT NULL,
    PRIMARY KEY (IID));

INSERT INTO INSTRUCTOR VALUES (1, 'Aleph');
INSERT INTO INSTRUCTOR VALUES (2, 'Bit');
INSERT INTO INSTRUCTOR VALUES (3, 'CRC');
INSERT INTO INSTRUCTOR VALUES (4, 'Dat');
INSERT INTO INSTRUCTOR VALUES (5, 'Emscr');


-- TABLE TO GET IID AND NUMBER OF STUDENTS UNDER PROFESSOR
SELECT IID,COUNT(SID) AS STUDENTS
FROM INS_STUDENT
GROUP BY IID
ORDER BY IID;

-- TABLE TO GET IID AND TOTAL HOURS UNDER PROFESSOR
SELECT IID,SUM(HOURS_TAUGHT) AS TOTAL_HOURS
FROM TEACHING
GROUP BY IID
ORDER BY IID;


-- BELOW QUERY IF HOURLY RATE WAS MULTIPLIED WITH TOTAL HOURS

-- ALTER TABLE INSTRUCTOR ADD COLUMN Bonus INTEGER NOT NULL DEFAULT 0;

-- -- ASSUMING A $10 PER HOUR SIMILAR RATE FOR EACH INSTRUCTOR 
-- UPDATE INSTRUCTOR I
-- INNER JOIN (SELECT IID,COUNT(SID) AS STUDENTS
-- FROM INS_STUDENT
-- GROUP BY IID
-- ORDER BY IID;) t1 
-- ON I.IID = t1.IID 
-- INNER JOIN (SELECT IID,SUM(HOURS_TAUGHT) AS TOTAL_HOURS
-- FROM TEACHING
-- GROUP BY IID
-- ORDER BY IID;) t2 
-- ON I.IID = t2.IID 
-- SET I.BONUS = 10*t2.TOTAL_HOURS*t1.STUDENTS*0.1;

-- BELOW QUERY FOR BONUS COLUMN = HOURLY RATE*STUDENTS_UNDER_PROFESSOR*0.1

ALTER TABLE INSTRUCTOR 
ADD Bonus INTEGER;

-- ASSUMING A $20 PER HOUR SIMILAR RATE FOR EACH INSTRUCTOR 
UPDATE INSTRUCTOR I
SET I.Bonus = 20*(SELECT COUNT(SID)
FROM INS_STUDENT
WHERE I.IID = IID)*0.1;